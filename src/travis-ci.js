// Generated by CoffeeScript 1.10.0

var apiToken = process.env.NESTOR_TRAVIS_ACCESS_TOKEN;
var orgName = process.env.NESTOR_TRAVIS_ORGNAME;

var apiHost = (ref1 = process.env.NESTOR_TRAVIS_API_HOST) != null ? ref1 : 'https://api.travis-ci.org'
var travisUrl = (ref2 = process.env.NESTOR_TRAVIS_URL) != null ? ref2 : 'https://travis-ci.org';

var TRAVIS_ACCEPT_HEADER = 'application/vnd.travis-ci.2+json';
var NOT_FOUND_MSG = 'Travis CI could not find that endpoint.';
var CANCEL_MSG = 'Build has been successfully cancelled.';

module.exports = function(robot) {
  var _request = function(opts, cb) {
    if (opts == null) {
      opts = {};
    }

    robot.http(opts.url).header('Accept', TRAVIS_ACCEPT_HEADER).header('Authorization', "token " + opts.token).request(opts.method)(function(err, res, body) {
      var data;
      if (err != null) {
        return cb(err);
      }
      if ((body != null) && body !== '') {
        data = JSON.parse(body);
      }
      if ((data != null ? data.file : void 0) === 'not found') {
        err = new Error(NOT_FOUND_MSG);
        return cb(err);
      }
      return cb(err, data);
    });
  };

  var _getLastBuild = function(org, repo, cb) {
    var url;
    if(!org && !orgName) {
      cb({message: "You need to specify a Github org or username or set a default env var in `NESTOR_TRAVIS_ORGNAME`"});
      return;
    }

    var canonicalOrg = org || orgName;

    url = [apiHost, 'repos', canonicalOrg, repo].join('/');
    _request({
      url: url,
      method: 'GET',
      token: apiToken
    }, function(err, data) {
      cb(err, data);
    });
  };

  var _restartOrCancelBuild = function(buildId, action, cb) {
    var url;
    url = [apiHost, 'builds', buildId, action].join('/');
    return _request({
      url: url,
      method: 'POST',
      token: apiToken
    }, function(err, data) {
      return cb(err, data);
    });
  };

  robot.respond(/travis me (?:([^\/]+)\/)?(.*)$/i, function(msg, done) {
    var org = msg.match[1];
    var repo = msg.match[2];
    _getLastBuild(org, repo, function(err, data) {
      var lastBuild;
      if (err != null) {
        msg.send("Oops, Travis CI returned an error: " + err.message, done);
        return;
      }

      msg.send("Last Build ID: " + data.repo.last_build_id + " Status: " + data.repo.last_build_state, done);
    });
  });

  robot.respond(/travis (restart|cancel) (?:([^\/]+)\/)?(.*)$/i, function(msg, done) {
    var action = msg.match[1].toLowerCase();
    var org = msg.match[2];
    var repo = msg.match[3];

    _getLastBuild(org, repo, function(err, data) {
      var lastBuild;
      if (err != null) {
        msg.send("Oops, Travis CI returned an error: " + err.message, done);
        return;
      }

      lastBuild = {
        url: [travisUrl, orgName, repo].join('/'),
        num: data.repo.last_build_number,
        id: data.repo.last_build_id
      };

      _restartOrCancelBuild(lastBuild.id, action, function(err, data) {
        var flashData, flashMsg, outputMsg, ref4, ref5;
        if (err != null) {
          msg.send("Oops, Travis CI returned an error: " + err.message, done);
          return;
        }

        if ((data != null ? data.error : void 0) != null) {
          flashMsg = data.error.message + ".";
        } else if (data != null) {
          flashData = data != null ? (ref4 = data.flash) != null ? ref4[0] : void 0 : void 0;
          flashMsg = (ref5 = flashData.notice) != null ? ref5 : flashData.error;
        } else if (action === 'cancel') {
          flashMsg = CANCEL_MSG;
        }
        outputMsg = flashMsg + " Build <" + lastBuild.url + "|\#" + lastBuild.num + ">.";
        msg.send(outputMsg, done);
      });
    });
  });
};
